<?php

use Drupal\config_replace\Exception\NonexistentInitialConfigException;
use Drupal\degov_common\DeGovModuleIntegrity;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 */
function degov_common_install() {
  // Restrict user registration to admin role creation.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', USER_REGISTER_ADMINISTRATORS_ONLY)
    ->save(TRUE);

  degov_common_import_translations();
  // Set the first day of the week to Monday.
  \Drupal::configFactory()->getEditable('system.date')->set('first_day', 1)->save();
  \Drupal::configFactory()->getEditable('degov_common.default_settings')->set('netiquette_url', '/netiquette')->set('privacy_url', '/datenschutzhinweise')->save();
}

/**
 * Implement hook_uninstall().
 */
function degov_common_uninstall() {
  \Drupal::configFactory()
    ->getEditable('degov_common.default_settings')
    ->delete();
}

function degov_common_import_translations(): void {
  $file = new \stdClass();
  $file->uri = drupal_get_path('profile', 'degov') . '/translations/de-de.po';
  $file->langcode = 'de';

  Drupal\locale\Gettext::fileToDatabase($file, [
    'overwrite_options' => [
      'not_customized' => TRUE,
    ],
  ]);
}

function degov_common_update_8016() {
  $query = \Drupal::database()->delete('key_value');
  $query->condition('collection', 'system.schema');
  $query->condition('name', 'degov_paragraph_webformular');
  $query->execute();

  \Drupal::configFactory()->getEditable('core.entity_form_display.paragraph.webformular.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.webformular.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.webformular.preview')->delete();
  \Drupal::configFactory()->getEditable('field.field.paragraph.webformular.field_sub_title')->delete();
  \Drupal::configFactory()->getEditable('field.field.paragraph.webformular.field_title')->delete();
  \Drupal::configFactory()->getEditable('field.field.paragraph.webformular.field_webform_form')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.webformular')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.webform')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.webform_form')->delete();
  \Drupal::configFactory()->getEditable('field.storage.paragraph.field_webform_form')->delete();

  \Drupal::service('module_installer')->install(['degov_paragraph_webform']);
}

/**
 * Added default URL settings for configuration
 */
function degov_common_update_8017() {
  \Drupal::configFactory()->getEditable('degov_common.default_settings')
    ->set('netiquette_url', '/netiquette')
    ->set('privacy_url', '/datenschutzhinweise')
    ->save();
}

/**
 * Installs the degov_theming module for decoupling degov_common module's theming functionality.
 */
function degov_common_update_8018() {
  \Drupal::service('module_installer')->install(['degov_theming']);
}

/**
 * Installs the config_replace module as a replacement for config_rewrite. Mainly because config_replace does not apply config rewrites for not existing original config and config_rewrite is unmaintained since a long time. config_replace will be removed from composer.json at 27.08.2018.
 */
function degov_common_update_8020() {
  /**
   * @var Drupal\Core\Extension\ModuleInstaller $moduleInstaller
   */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->uninstall(['config_rewrite']);
  $moduleInstaller->install(['config_replace']);
}

/**
 * Remove entity_reference_integrity module
 */
function degov_common_update_8021() {
  \Drupal::service('module_installer')->uninstall(['entity_reference_integrity']);
}

/**
 * Remove lightning_workflow module
 */
function degov_common_update_8023() {
  \Drupal::service('module_installer')->uninstall(['lightning_workflow']);
}

/**
 * Remove workbench moderation keys form configuration
 */
function degov_common_update_8026() {
  //Remove workbench_moderation dependency from configuration
  $mediaBundleInfo = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo('media');
  $nodeBundleInfo = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo('node');
  $paragraphBundleInfo = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo('paragraph');

  $types['media'] = array_keys($mediaBundleInfo);
  $types['node'] = array_keys($nodeBundleInfo);
  $types['paragraph'] = array_keys($paragraphBundleInfo);

  /** @var \Drupal\degov_common\Entity\ConfigRemover $configRemover */
  $configRemover = \Drupal::service('degov_common.config_remover');

  $viewModes = \Drupal::entityQuery('entity_view_display')->execute();
  $formModes = \Drupal::entityQuery('entity_form_display')->execute();

  // Remove dependency from content type view modes
  foreach ($viewModes as $viewMode) {
    $configRemover->removeListItemFromConfiguration('core.entity_view_display.' . $viewMode, 'dependencies.module', 'workbench_moderation');
  }
  // Remove dependency from form modes
  foreach ($formModes as $formMode) {
    $configRemover->removeListItemFromConfiguration('core.entity_form_display.' . $formMode, 'dependencies.module', 'workbench_moderation');
  }
  // Remove 3. party settings
  foreach (['media', 'node', 'paragraph'] as $type) {
    foreach ($types[$type] as $nodeType) {
      $configRemover->removeListItemFromConfiguration($type . '.type.' . $nodeType, 'dependencies.module', 'workbench_moderation');
      $configRemover->removeValueFromConfiguration($type . '.type.' . $nodeType, 'third_party_settings', 'workbench_moderation');
    }
  }
  // Disable workbench_moderation
  \Drupal::service('module_installer')->uninstall(['workbench_moderation']);
  \Drupal::service('module_installer')->install(['content_moderation', 'workflows', 'degov_users_roles']);

}

/**
 * Updated media browser view
 */
function degov_common_update_8028() {
  $replace = Yaml::parse(file_get_contents(drupal_get_path('module', 'degov_common') . '/config/rewrite/views.view.media' . '.yml'));
  \Drupal::configFactory()
    ->getEditable('views.view.media')
    ->setData($replace)
    ->save(TRUE);
}

/**
 * Updated latest media browser view
 */
function degov_common_update_8030() {
  /**
   * @var $moduleUpdater \Drupal\degov_common\DegovModuleUpdater
   */
  $moduleUpdater = \Drupal::service('degov_config.module_updater');
  $moduleUpdater->reImport('views.view.latest_media','degov_content_types_shared_fields','install');
}

/**
 * Updated media browser view
 */
function degov_common_update_8031() {
  /**
   * @var $moduleUpdater \Drupal\degov_common\DegovModuleUpdater
   */
  $moduleUpdater = \Drupal::service('degov_config.module_updater');
  $moduleUpdater->reImport('views.view.media','degov_common','rewrite');
}

/**
 * Install node overrides module
 */
function degov_common_update_8032() {
  if (!\Drupal::moduleHandler()->moduleExists('degov_node_overrides')) {
    \Drupal::service('module_installer')->install(['degov_node_overrides']);
  }
}

/**
 * Implements hook_update_dependencies().
 *
 * @return array
 */
function degov_common_update_dependencies(): array {
  $dependencies['degov'][8450] = [
    'degov_common' => 8032,
  ];

  return $dependencies;
}

/**
 * Implements hook_requirements().
 *
 * @param string $phase
 *
 * @return array
 */
function degov_common_requirements(string $phase): array {
  $requirements = [];
  if ($phase === 'runtime') {

    $requirements['degov_common'] = [
      'severity'    => REQUIREMENT_OK,
      'title'       => t('deGov version'),
      'description' => t('Version of deGov'),
      'value'       => t('Version: @version', ['@version' => system_get_info('module', 'degov')['version']]),
    ];

    /**
     * @var $deGovIntegrity DeGovModuleIntegrity
     */
    $deGovIntegrity = \Drupal::service('degov_common.module_integrity');
    $degov_integrity_maintained = TRUE;
    foreach ($deGovIntegrity->checkIntegrity() as $index => $module) {
      foreach ($module as $key => $messages) {
        $requirements['degov_integrity_' . $key] = [
          'severity'    => REQUIREMENT_ERROR,
          'title'       => t('deGov integrity - @module', ['@module' => $key]),
          'description' => $deGovIntegrity->buildMessage($messages),
          'value'       => t('Configuration is missing'),
        ];
        $degov_integrity_maintained = FALSE;
      }
    }

    if($degov_integrity_maintained) {
      $requirements['degov_integrity'] = [
        'severity'    => REQUIREMENT_OK,
        'title'       => t('deGov integrity'),
        'description' => t('All expected configurations appear to be present.'),
        'value'       => t('Configurations checked'),
      ];
    }
  }
  return $requirements;
}
