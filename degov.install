<?php
/**
 * @file
 * Install, update and uninstall hooks for the {{ profile }} subprofile.
 */

use Drupal\field\Entity\FieldConfig;

function degov_update_8440() {
  // Read the configuration.
  $module_data = \Drupal::config('core.extension')->get('module');

  // Remove lightning
  unset($module_data['lightning']);

  // Write the configuration.
  \Drupal::configFactory()
    ->getEditable('core.extension')
    ->set('module', $module_data)
    ->save();
}

/**
 * Uninstalls the lightning API module. It will be removed in 3.x
 */
function degov_update_8441() {
  \Drupal::service('module_installer')->uninstall(['lightning_api']);
}

/**
 * Uninstalls the lightning workflow module. It will be removed in 3.x
 */
function degov_update_8442() {
  \Drupal::service('module_installer')->uninstall(['lightning_workflow']);
  \Drupal::service('module_installer')->uninstall(['lightning_scheduler']);
}

/**
 * Installing Bartik theme to prevent configuration errors created by block imports
 */
function degov_update_8443() {
  \Drupal::service('theme_installer')->install(['bartik']);
}

/**
 * Install degov_paragraph_webform and degov_paragraph_slideshow by default
 */
function degov_update_8444() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');
  $moduleInstaller->install([
    'degov_paragraph_webform',
    'degov_paragraph_slideshow',
    'degov_paragraph_header',
  ]);
}

/**
 * Remove password policy module
 */
function degov_update_8445() {
  \Drupal::service('module_installer')->uninstall([
    'degov_password_policy',
    'password_policy_length',
    'password_policy_characters',
    'password_policy_character_types',
    'password_policy_history',
    'password_policy_username',
    'password_policy',
  ]);
}

/**
 * Add missing image preview icons
 */
function degov_update_8447() {

  if (\Drupal::moduleHandler()->moduleExists('media')) {
    $source = drupal_get_path('module', 'media') . '/images/icons';
    $destination = \Drupal::config('media.settings')->get('icon_base_uri');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

    $files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
    foreach ($files as $file) {
      // When reinstalling the media module we don't want to copy the icons when
      // they already exist. The icons could be replaced (by a contrib module or
      // manually), so we don't want to replace the existing files. Removing the
      // files when we uninstall could also be a problem if the files are
      // referenced somewhere else. Since showing an error that it was not
      // possible to copy the files is also confusing, we silently do nothing.
      if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
        file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_ERROR);
      }
    }
  }
}

/**
 * Safe scheduled_updates uninstall
 */
function degov_update_8448() {
  foreach ([
             'normal_page',
             'blog',
             'press',
             'simplenews_issue',
             'faq',
             'event',
             'external_teaser',
           ] as $nodeType) {
    $fieldConfig = FieldConfig::loadByName('node', $nodeType, 'scheduled_updates');
    if (!empty($fieldConfig)) {
      $fieldConfig->delete();
    }
  }
}

/**
 * Uninstalls an old lightning dependency
 */
function degov_update_8449() {
  // Read the configuration.
  $module_data = \Drupal::config('core.extension')->get('module');

  // Remove openapi_redoc
  unset($module_data['openapi_redoc']);

  // Write the configuration.
  \Drupal::configFactory()
    ->getEditable('core.extension')
    ->set('module', $module_data)
    ->save();
}

/**
 * Translate social media settings string into German.
 */
function degov_update_8500() {
  degov_common_import_translations();
}


/**
 * Repair broken view modes
 */
function degov_update_8501() {

  $viewModes = \Drupal::entityQuery('entity_view_display')->execute();
  foreach ($viewModes as $viewMode) {
    $configurationName = 'core.entity_view_display.' . $viewMode;
    if (\Drupal::config($configurationName)->get('id') === NULL) {
      list($entityType, $viewModeId) = explode('.', $viewMode);
      if ($entityType === 'node' || $entityType === 'media') {
        $moduleName = 'degov_' . $entityType . '_' . $viewModeId;
        if (\Drupal::moduleHandler()->moduleExists($moduleName)) {
          $replace = Yaml::parse(file_get_contents(drupal_get_path('module', $moduleName) . '/config/install/' . $configurationName . '.yml'));
          \Drupal::configFactory()
            ->getEditable($configurationName)
            ->setData($replace)
            ->save(TRUE);
        }
      }
    }
  }

  $viewModes = \Drupal::entityQuery('entity_form_display')->execute();
  foreach ($viewModes as $viewMode) {
    $configurationName = 'core.entity_form_display.' . $viewMode;
    if (\Drupal::config($configurationName)->get('id') === NULL) {
      list($entityType, $viewModeId) = explode('.', $viewMode);
      if ($entityType === 'node' || $entityType === 'media') {
        $moduleName = 'degov_' . $entityType . '_' . $viewModeId;
        if (\Drupal::moduleHandler()->moduleExists($moduleName)) {
          $replace = Yaml::parse(file_get_contents(drupal_get_path('module', $moduleName) . '/config/install/' . $configurationName . '.yml'));
          \Drupal::configFactory()
            ->getEditable($configurationName)
            ->setData($replace)
            ->save(TRUE);
        }
      }
    }
  }
}

/**
 * deGov Update 5.1.0 - Removal of the Workbench Access module. Installation of deGov Email Login module., Install the Link Attributes module, if it's not already installed.
 */
function degov_update_850100() {

  if (!\Drupal::moduleHandler()->moduleExists('link_attributes')) {
    \Drupal::service('module_installer')->install([
      'link_attributes',
    ]);
  }

  if (!\Drupal::moduleHandler()->moduleExists('degov_email_login')) {
    \Drupal::service('module_installer')->install(['degov_email_login']);
  }

  if (\Drupal::moduleHandler()->moduleExists('degov_workbench_access')) {
    \Drupal::service('module_installer')->uninstall(['degov_workbench_access']);
  }
}

/**
 * Re-Import search_media view.
 */
function degov_update_860000() {
  /**
   * @var $moduleUpdater \Drupal\degov_common\DegovModuleUpdater
   */
  $moduleUpdater = \Drupal::service('degov_config.module_updater');
  $moduleUpdater->reImport('views.view.search_media', 'degov_search_media', 'install');
}

/**
 * Install the degov_config_integrity, degov_auto_crop and degov_file_management modules, update translations.
 */
function degov_update_860100() {
  if (!\Drupal::moduleHandler()->moduleExists('degov_config_integrity')) {
    \Drupal::service('module_installer')->install(['degov_config_integrity']);
  }

  if (!\Drupal::moduleHandler()->moduleExists('degov_file_management')) {
    \Drupal::service('module_installer')->install(['degov_file_management']);
  }

  if (!\Drupal::moduleHandler()->moduleExists('degov_auto_crop')) {
    \Drupal::service('module_installer')->install(['degov_auto_crop']);
  }

  $file = new \stdClass();
  $file->uri = drupal_get_path('profile', 'degov') . '/translations/de-de.po';
  $file->langcode = 'de';

  Drupal\locale\Gettext::fileToDatabase($file, [
    'overwrite_options' => [
      'not_customized' => TRUE,
    ],
  ]);
}

/**
 * Install the filter_disallow module.
 */
function degov_update_860200() {
  if (!\Drupal::moduleHandler()->moduleExists('filter_disallow')) {
    \Drupal::service('module_installer')->install(['filter_disallow']);
  }
}

function degov_update_dependencies() {
  $dependencies['field_group'][8301] = [
    'degov' => 8501,
  ];
  return $dependencies;
}
