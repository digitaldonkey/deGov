<?php

use Drupal\node\Entity\Node;
use Symfony\Component\Yaml\Yaml;
use Drupal\taxonomy\Entity\Term;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media_entity\Entity\Media;

/**
 * Implements hook_install().
 *
 * Create demo content, when module installs
 *
 * @see system_install()
 */
function degov_demo_install() {
  
  // Demo content ssettings
  $demo_create_images = true;
  $demo_create_paragraphs = true;
  $demo_create_content_types = true;
  
  // Module Path
  $module_path = sprintf('modules/custom/degov_demo/assets', \Drupal::root());
  $module_real_path = \Drupal::service('file_system')->realpath($module_path);

  $files_ids = array();
  $files_system_ids = array();
  $paragraphs_ids = array();

  // Create images
  if($demo_create_images) {
    $res = null;
    $res = degov_demo_images($module_real_path);
    $files_ids = $res[0];
    $files_system_ids = $res[1];
  }

  // Create paragraphs
  if($demo_create_paragraphs) {
    $paragraphs_ids = degov_demo_paragraphs($module_real_path, $files_ids, $files_system_ids);
  }

  // Create Content-Types
  if($demo_create_content_types) {
    degov_demo_content_types($module_real_path, $files_ids, $files_system_ids, $paragraphs_ids);
  }
}

/**
 * Creates demo images for the deGov installation.
 *
 * @param string $module_real_path The real module path of the drupal installation.
 * @param array  $files_ids An array with field ids.
 *
 * @see degov_demo_install()
 */
function degov_demo_images($module_real_path) {
  
  $files = glob($module_real_path.'/images/*.jpg');
  
  foreach ($files as $file) {
    
    // Basename without Path
    $file_basename = basename($file);
    
    // Create file object
    $image_system = file_save_data(file_get_contents($file), 'public://'.$file_basename, FILE_EXISTS_REPLACE);
    
    if ($image_system) {
      
      // Create media object
      $image_media = Media::create([
        'bundle' => 'image',
        'uid' => '1',
        'status' => Media::PUBLISHED,
        'image' => [
          'target_id' => $image_system->id(),
          'alt' => t('Demo Image'),
          'title' => t('Demo Image'),
        ],
      ]);
      $image_media->save();
      
      $files_ids[$file_basename] = $image_media->id();
      $files_system_ids[$file_basename] = $image_system->id();
    }
  }

  return array($files_ids, $files_system_ids);

}

/**
 * Creates demo paragraphs for the deGov installation.
 *
 * @param string $module_real_path The real module path of the drupal installation.
 * @param array  $files_ids An array with field ids.
 * @param array  $files_system_ids An array with field ids.
 *
 * @see degov_demo_install()
 */
function degov_demo_paragraphs($module_real_path, $files_ids, $files_system_ids) {
  
  // Load assets
  $assets = file_get_contents($module_real_path . '/degov_demo_paragraphs.assets.yml');
  $assets = Yaml::parse($assets);
  
  if ($assets) {
    
    foreach ($assets as $paragraphs_type => $paragraphs) {
      foreach ($paragraphs as $paragraph) {
        
        $xkey = null;
        $insert_fields = null;
        $insert_fields['type'] = $paragraphs_type;
        
        foreach ($paragraph as $field => $value) {
          
          if ($field == 'xkey') {
            $xkey = $value;
          }
          else if (preg_match('/(\_image|\_media)$/', $field)) {
            if ((!empty($value)) && ($value != 'null')) $insert_fields[$field][0]['target_id'] = $files_ids[$value];
            else $insert_fields[$field][0]['target_id'] = $files_ids[array_rand($files_ids, 1)];
          }
          else if (preg_match('/\_images$/', $field)) {
            $insert_fields[$field][0]['target_id'] = $files_system_ids[array_rand($files_system_ids, 1)];
            $insert_fields[$field][1]['target_id'] = $files_system_ids[array_rand($files_system_ids, 1)];
            $insert_fields[$field][2]['target_id'] = $files_system_ids[array_rand($files_system_ids, 1)];
            $insert_fields[$field][3]['target_id'] = $files_system_ids[array_rand($files_system_ids, 1)];
            $insert_fields[$field][4]['target_id'] = $files_system_ids[array_rand($files_system_ids, 1)];
          }
          else if (preg_match('/\_color$/', $field)) {
            $insert_fields[$field][0]['value'] = $value;
          }
          else if (preg_match('/\_files$/', $field)) {
            // $insert_fields[$field]['target_id'] = null;
          }
          else if (preg_match('/\_links$/', $field)) {
            $insert_fields[$field][0] = array(
              'uri' => 'http://www.mfdaos.org/link-zur-unterseite-eins',
              'title' => 'Dies ist ein Link zur Unterseite Eins',
            );
            $insert_fields[$field][1] = array(
              'uri' => 'http://www.mfdaos.org/link-zur-unterseite-zwei',
              'title' => 'Dies ist ein Link zur Unterseite Zwei',
            );
            $insert_fields[$field][2] = array(
              'uri' => 'http://www.mfdaos.org/link-zur-unterseite-drei',
              'title' => 'Dies ist ein Link zur Unterseite Drei',
            );
          }
          else if (preg_match('/\_website$/', $field)) {
            $insert_fields[$field][0] = array(
              'uri' => 'http://www.mfdaos.org/link-zur-unterseite-eins',
              'title' => 'Dies ist ein Link',
            );
          }
          else {
            $insert_fields[$field]['value'] = $value;
            if (strpos($value, '<p>') !== false) {
              $insert_fields[$field]['format'] = 'rich_text';
            }
          }
        }
        
        // Save Paragraph
        $oParagraph = Paragraph::create($insert_fields);
        $oParagraph->save();
        
        // Save Paragraph Id
        $paragraphs_ids[$xkey] = $oParagraph->id();
      }
    }
  }

  return $paragraphs_ids;
}

/**
 * Creates demo Content-Types for the deGov installation.
 *
 * @param string $module_real_path The real module path of the drupal installation.
 * @param array  $files_ids An array with field ids.
 * @param array  $paragraphs_ids An array with paragraph ids.
 *
 * @see degov_demo_install()
 */
function degov_demo_content_types($module_real_path, $files_ids, $files_system_ids, $paragraphs_ids) {
  
  // Load assets
  $assets = file_get_contents($module_real_path . '/degov_demo_contents.assets.yml');
  $assets = Yaml::parse($assets);
  
  if ($assets) {
    
    // Taxonomies
    $taxterm_ids = array();
    foreach ($assets['taxonomy'] as $tax) {
      
      // Taxonomy
      foreach ($tax as $key => $terms) {
        
        $taxterm_ids[$key] = null;
        
        foreach ($terms as $term) {
          
          // Load and Check Term
          $terms_obj = null;
          $terms_obj = taxonomy_term_load_multiple_by_name($term, $key);
          
          if (!$terms_obj) {
            
            // Save Term
            $res = null;
            $res = Term::create([
              'vid' => $key,
              'name' => $term,
            ])->save();
            
            // Load new Term
            if ($res) {
              $terms_obj = taxonomy_term_load_multiple_by_name($term, $key);
            }
          }
          
          if ($terms_obj) {
            foreach ($terms_obj as $tid => $term_item) {
              $taxterm_ids[$key][] = $tid;
            }
            
          }
          
        }
        
      }
      
    }
    
  }
  
  // Content Types
  $menu_entries = null;
  $home_page_id = null;
  $parent_page_ids = null;
  $home_page_articles_ids = null;
  
  foreach ($assets as $content_type => $entries) {
    
    if ($content_type == 'taxonomy') {
      continue;
    }
    
    // Content Type Datas
    foreach ($entries as $entry) {
      
      $insert_fields = null;
      
      // Defualt Fields
      $insert_fields['type'] = $content_type;
      $insert_fields['title'] = $entry['field_title'];
      $insert_fields['status'] = 1;
      $insert_fields['moderation_state'][0]['target_id'] = 'published';
      
      // Content Type Datas
      $xkey = null;
      $xparent = null;
      foreach ($entry as $page_field => $value) {
        
        if ($page_field == 'xkey') {
          $xkey = $value;
        }
        else if ($page_field == 'xparent') {
          $xparent = $value;
        }
        else if ($page_field == 'field_title') {
          continue;
        }
        else if (preg_match('/\_color$/', $page_field)) {
          $insert_fields[$page_field][0]['value'] = $value;
        }
        else if (preg_match('/\_image$/', $page_field)) {
          if ((!empty($value)) && ($value != 'null')) $insert_fields[$page_field][0]['target_id'] = $files_ids[$value];
          else $insert_fields[$page_field][0]['target_id'] = $files_ids[array_rand($files_ids, 1)];
        }
        else if ((preg_match('/\_section$/', $page_field)) && (!empty($xparent))) {
          $insert_fields[$page_field][0]['target_id'] = $parent_page_ids[$xparent];
        }
        else if (preg_match('/(\_contents|\_slider)$/', $page_field)) {
          if ((!empty($value)) && (is_array($value))) {
            foreach ($value as $i => $value_pt) {
              $insert_fields[$page_field][$i]['target_id'] = $paragraphs_ids[$value_pt];
              $insert_fields[$page_field][$i]['target_revision_id'] = $insert_fields[$page_field][$i]['target_id'];
            }
          }
        }
        else if (preg_match('/\_tags$/', $page_field)) {
          for($i=0;$i<3;$i++) {
            $insert_fields[$page_field][$i]['target_id'] = $taxterm_ids['tags'][array_rand($taxterm_ids['tags'],1)];
          }
        }
        else {
          $insert_fields[$page_field]['value'] = $value;
          if (strpos($value, '<p>') !== false) {
            $insert_fields[$page_field]['format'] = 'rich_text';
          }
        }
        
      }
      
      // Save Node
      $node = Node::create($insert_fields);
      $node->save();
      
      // Save Home Page Id
      if (in_array($content_type, array('home_page'))) {
        
        $home_page_id = $node->id();
        
      }
      
      
      // List all Parent Pages
      if ($xkey) {
        $parent_page_ids[$xkey] = $node->id();
      }

      if (!empty($insert_fields['menu_name'])) {
      
        // Add Node to Menu - 1nd level
        $first_level = null;
        if (($xkey) && (!$xparent)) {

          $first_level = MenuLinkContent::create([
            'title' => $insert_fields['menu_title'],
            'link' => ['uri' => 'internal:/node/' . $node->id()],
            'menu_name' => $insert_fields['menu_name'],
            'weight' => $insert_fields['menu_weight'],
            'expanded' => true,
          ]);

          $first_level->save();

          // Save Menu Entry
          $menu_entries[$xkey] = $first_level;

          if (in_array($content_type, array('section_page'))) {

            // Save Ids for Home Page
            $home_page_articles_ids[] = $node->id();

          }

        }

        // Add Node to Menu - 2nd level
        $second_level = null;
        if (($xparent) && (array_key_exists($xparent, $menu_entries))) {

          $second_level = MenuLinkContent::create([
            'title' => $insert_fields['menu_title'],
            'link' => ['uri' => 'internal:/node/' . $node->id()],
            'menu_name' => $insert_fields['menu_name'],
            'weight' => $insert_fields['menu_weight'],
            'parent' => $menu_entries[$xparent]->getPluginId(),
            'expanded' => true,
          ]);

          $second_level->save();

          // Save Menu Entry
          if ($xkey) {
            $menu_entries[$xkey] = $second_level;
          }

        }

        // Save Ids for Home Page
        $home_page_articles_ids[] = $node->id();
        
      }
    }
  }
  
  // Set Main/Articles for Home Page
  $node = null;
  $node = Node::load($home_page_id);
  $node->field_home_page_contents = array('target_id' => $home_page_articles_ids[1]);
  $node->field_home_page_contents = array('target_id' => $home_page_articles_ids[2]);
  $node->field_home_page_contents = array('target_id' => $home_page_articles_ids[3]);
  $node->save();
}
