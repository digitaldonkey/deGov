# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
x-baseimage: &baseimage
  - image: digitaldonkey/circleci-degov:0.0.17
    environment:
      RELEASE_BRANCH: release/7.6.x-dev
      COMPOSER_ALLOW_SUPERUSER: 1
      COMPOSER_MEMORY_LIMIT: -1
      COMPOSER_EXIT_ON_PATCH_FAILURE: 1
      CIRCLECI_CACHE_TAG: v1
      MYSQL_DATABASE: testing
      MYSQL_USER: testing
      MYSQL_PASSWORD: testing

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # Using the RAM variation mitigates I/O contention
    # for database intensive operations.
x-dbimage: &dbimage
  - image: circleci/mysql:5.7-ram
    command: mysqld --max_allowed_packet=65011712
    environment:
      MYSQL_DATABASE: testing
      MYSQL_USER: testing
      MYSQL_PASSWORD: testing

version: 2
jobs:
  build:
    docker:
      - <<: *baseimage
    steps:
      - checkout:
          path: /home/circleci/project/docroot/profiles/contrib/
      - run:
          name: Add mysql client
          command: |
            echo "###"
            echo "working_directory: $(pwd)"
            echo "###"
            echo "# ls -al docroot/profiles/contrib/.circleci/"
            echo "###"

### Prepare git uses the code from "- checkout" step without cloning repository.
#      - run:
#          name: Prepare Cloning
#          command: |
#            mkdir -p ~/.ssh
#            echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
#            bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
#            " >> ~/.ssh/known_hosts
#            (umask 077; touch ~/.ssh/id_rsa)
#            chmod 0600 ~/.ssh/id_rsa
#            (cat <<EOF > ~/.ssh/id_rsa
#            $CHECKOUT_KEY
#            EOF
#            )
#            # use git+ssh instead of https
#            git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
#            git config --global gc.auto 0 || true


      - run:
          name: Repository Environment Variables for project and LFS
          command: |
              mkdir -p /tmp/ci-cache
              if git ls-remote --exit-code --heads https://digitaldonkey@bitbucket.org/publicplan/degov_project.git "$CIRCLE_BRANCH";
              then
                echo 'export PROJECT_BRANCH="$CIRCLE_BRANCH"' >> $BASH_ENV
              else
                echo 'export PROJECT_BRANCH="$RELEASE_BRANCH"' >> $BASH_ENV
              fi
              if git ls-remote --exit-code --heads https://digitaldonkey@bitbucket.org/publicplan/degov_devel_git_lfs.git "$CIRCLE_BRANCH";
                then
                  echo 'export LFS_BRANCH="$CIRCLE_BRANCH"' >> $BASH_ENV
                else
                  echo 'export LFS_BRANCH="$RELEASE_BRANCH"' >> $BASH_ENV
                fi
                echo 'export PATH="/home/circleci/project/bin:$PATH"' >> $BASH_ENV
                source $BASH_ENV
                echo "PROJECT_BRANCH = $PROJECT_BRANCH"
                echo "LFS_BRANCH = $LFS_BRANCH"
                # Used for caching
                echo "$PROJECT_BRANCH, $LFS_BRANCH, $CIRCLECI_CACHE_TAG," > /tmp/ci-cache/project-setup
                echo "$CIRCLE_SHA1, $CIRCLE_BRANCH, $PROJECT_BRANCH, $LFS_BRANCH, $CIRCLECI_CACHE_TAG" > /tmp/ci-cache/composer
#                if [ ! -f /tmp/ci-cache/profile-setup-lock ]; then
#                  # Generate file with arbitrary content to have a file for cache checksum.
#                  head -c 64 </dev/urandom > /tmp/ci-cache/profile-setup-lock
#                fi

     #  Composer cache
      - restore_cache:
         keys:
           - composer-global-cache-{{ epoch }}
           - composer-global-cache-


      # PROJECT SETUP
      - restore_cache:
         keys:
          - project-dependencies-project-setup-{{ checksum "/tmp/ci-cache/project-setup" }}-v2
      - run:
          name: Set up Project
          command: | # if not in cache
            if [ ! -f ./composer.json ]; then
              rm -rf ./*  # removing default -checkout as we use composer, but we keep circleci known_hosts setup.
              composer create-project --remove-vcs "degov/degov-project:dev-$PROJECT_BRANCH" --no-install --ansi --no-progress .
            else
              echo "Restored from cache"
            fi
      - save_cache:
          key: project-dependencies-project-setup-{{ checksum "/tmp/ci-cache/project-setup" }}-v2
          paths:
           - .
           - /tmp/ci-cache

      # INSTALL PROFILE
#      - run:
#          name: TEST LOCK CACHING
#          command: | # if not in cache
#            if [ -f /tmp/ci-cache/profile-setup-lock ]; then
#              composer update --lock --ansi --no-progress
#              git diff --no-index composer.lock /tmp/ci-cache/profile-setup-lock
#            fi

      - run:
          name: Composer require deGov
          command: | # if not in cache
            if [ ! -f /tmp/ci-cache/profile-setup-lock ]; then
              rm composer.lock
              composer require "degov/degov:dev-$CIRCLE_BRANCH#$CIRCLE_SHA1" degov/degov_devel_git_lfs:dev-$LFS_BRANCH --update-with-all-dependencies --ansi --no-progress
            else
              composer update --lock --ansi --no-progress
            fi
            (cd docroot/profiles/contrib/degov/testing/lfs_data/ && git lfs install)
            cp composer.lock /tmp/ci-cache/profile-setup-lock

      # TODO
      # composer update --lock ??
      # For propper caching we would require a solution invloving composer.lock from commit which is not committed.
      # We should ensure to have everything updated at build time. ??
      # Probably
      # - check the lock file and compare with /tmp/ci-cache/profile-setup-lock
      #   - if lock differs then update project and "project-setup-done", use cache somehow.
      # - run:
      #     name: Composer update composer.lock
      #     command: |
      #       composer update --lock --ansi --no-progress
      #       cat composer.lock
      #       cat md5sum composer.lock

      - run:
          name: Set up Drupal config & directories
          command: |
            if [ ! -d docroot/sites/default/files/private/ ]; then
              mkdir -p docroot/sites/default/files/private/
              mkdir docroot/sites/default/files/translations/
              chmod 777 -R docroot/sites/default/files/
              mkdir -p config/sync
              chmod 777 config/sync
              ls -al docroot/sites/default/files/

              tee <<EOF > docroot/sites/default/settings.php
            <?php

            \$settings["file_private_path"] = "sites/default/files/private";
            \$settings["file_public_path"] = "sites/default/files";
            \$config["system.file"]["path"]["temporary"] = "/tmp";
            \$settings["trusted_host_patterns"] = ["^127.0.0.1$","^localhost$","^host.docker.internal$"];
            \$config["locale.settings"]["translation"]["path"] = "sites/default/files/translations";
            \$config["swiftmailer.transport"]["transport"] = "spool";
            \$config["swiftmailer.transport"]["spool_directory"] = "/tmp/swiftmailer-spool";
            \$base_url = 'http://localhost';
            \$config_directories[CONFIG_SYNC_DIRECTORY] = '../config/sync';
            # Increase drush 9 memory limit
            if (PHP_SAPI === 'cli') { ini_set('memory_limit', '512M'); }
            require 'settings.local.php';

            EOF
            cat docroot/sites/default/settings.php

      - run:
          name: Drush Config
          command: |
            tee <<EOF > docroot/sites/default/drushrc.php
            <?php

            ini_set('memory_limit', '512M');
            \$options['r'] = '/home/circleci/project/docroot';
            \$options['l'] = 'http://localhost';

            EOF
            fi

            unlink bin/drush
            tee <<EOF > bin/drush
            #!/bin/bash
            /usr/local/bin/php /home/circleci/project/vendor/drush/drush/drush -c /home/circleci/project/docroot/sites/default/drushrc.php --root=/home/circleci/project/docroot/ -l default --uri=localhost --yes "\$@"
            EOF
            chmod 755 bin/drush
            cat bin/drush
            echo 'export DRUPAL_DB_URL="mysql://$MYSQL_USER:$MYSQL_PASSWORD@127.0.0.1:3306/$MYSQL_DATABASE"' >> $BASH_ENV


#      - save_cache:
#          key: project-dependencies-composer-{{ checksum "/tmp/ci-cache/profile-setup-lock" }}-{{ checksum "/tmp/ci-cache/composer" }}-{{ checksum "docroot/profiles/contrib/degov/.circleci/config.yml" }}
#          paths:
#           - .
#           - /tmp/ci-cache

      - save_cache:
          key: composer-global-cache-{{ epoch }}
          paths:
           - ~/.composer/cache

      - run:
          name: Configure & start Apache
          command: |
            if [ ! -L /etc/apache2/sites-enabled/project.conf ]; then
              sudo a2ensite project
            fi
            sudo service apache2 start

# We need to save a cache based on the lock file which we don't commit :/
#      - save_cache:
#          key: project-dependencies-apache-vhost-{{ checksum "docroot/profiles/contrib/degov/.circleci/vhost.conf" }}-{{ checksum "docroot/profiles/contrib/degov/.circleci/config.yml" }}
#          paths:
#            - .

      - run:
          name: Remove Git Repos
          command: |
            find . | grep \\.git$ | xargs rm -rf

      - persist_to_workspace:
          root: /
          paths:
            - home/circleci/.ssh
            - home/circleci/.drush
            - home/circleci/project
            - tmp/ci-cache/*

  test1:
    docker:
     - <<: *baseimage
     - <<: *dbimage
    steps:
      - attach_workspace:
          at: /

      - run:
          name: Start Apache
          command: |
            if [ ! -L /etc/apache2/sites-enabled/project.conf ]; then
              sudo a2ensite project
            fi
            sudo service apache2 start

      - run:
          name: Verify Checkout
          command: |
            echo "###"
            echo "working_directory: $(pwd)"
            echo "###"
            ls -al /home/circleci
            cat docroot/sites/default/settings.php


  db_dump_setup:
    docker:
     - <<: *baseimage
     - <<: *dbimage
    steps:
      - attach_workspace:
          at: /

      - run:
          name: Start Apache
          command: |
            if [ ! -L /etc/apache2/sites-enabled/project.conf ]; then
              sudo a2ensite project
            fi
            sudo service apache2 start

      - run:
          name: Waiting for MySQL to be ready
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          # @see https://circleci.com/docs/2.0/postgres-config/#example-mysql-project
          command: |
            # For whatever stupid reson we cant do this in Dockerfile, but drush requires mysql.
            sudo apt install default-mysql-client --no-install-recommends
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1


      - run:
          name: Install DB dump
          command: |
            cp docroot/profiles/contrib/degov/testing/behat/template/settings.local.php docroot/sites/default/settings.local.php
            sed -i "s/{{ mysql_auth.db }}/$MYSQL_DATABASE/g" docroot/sites/default/settings.local.php
            sed -i "s/{{ mysql_auth.user }}/$MYSQL_USER/g" docroot/sites/default/settings.local.php
            sed -i "s/{{ mysql_auth.password }}/$MYSQL_PASSWORD/g" docroot/sites/default/settings.local.php
            sed -i 's/{{ mysql_host }}/127.0.0.1/g' docroot/sites/default/settings.local.php
            echo '$settings["hash_salt"] = "7asdiugasd8f623gjwgasgf7a8stfasjdfsdafasdfasdfasdf";' >> docroot/sites/default/settings.local.php
            ls -al docroot/sites/default/files/

            cd docroot/
            drush status
            echo "DRUPAL_DB_URL: $DRUPAL_DB_URL"
            drush sql:drop --db-url="$DRUPAL_DB_URL"
            gunzip -c profiles/contrib/degov/testing/lfs_data/degov-7.x-dev.sql.gz | drush sqlc --db-url="$DRUPAL_DB_URL"
            drush cr
            drush watchdog:delete all
            drush updb
            drush cr
            drush pm:uninstall degov_demo_content
            drush pm:enable degov_demo_content
            drush locale:check
            drush locale:update
            drush php-eval 'Drupal\degov\TranslationImporter::importForProfile()'
            drush cr

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - test1:
          requires:
            - build
      - db_dump_setup:
          requires:
            - build

# SSH
# source $BASH_ENV
# sudo apt update && sudo apt install vim mysql-client nmap lynx
# nmap localhost -Pn 3306
# bin/drush status -c docroot/sites/default/drushrc.php
# mysql -u testing -p -h 127.0.0.1 -P 3306 testing
# alias test="PHPRC=/home/circleci/project/drush.ini /usr/local/bin/php  /home/circleci/project/bin/drush -c /home/circleci/project/docroot/sites/default/drushrc.php --root=/home/circleci/project/docroot/ -l default --uri=http://localhost -y"
# circleci@defc4957b553:~/project$ test  php-eval 'print(ini_get("memory_limit")."\n");'
# 512M
# --db-url=mysql://testing:testing@localhost:3306/testing -y
# gunzip -c project/docroot/profiles/contrib/degov/testing/lfs_data/degov-7.x-dev.sql.gz | drush sqlc --db-url="mysql://testing:testing@localhost:3306/testing"
# gunzip -c project/docroot/profiles/contrib/degov/testing/lfs_data/degov-7.x-dev.sql.gz | drush sqlc --db-url="$DRUPAL_DB_URL"
