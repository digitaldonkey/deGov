# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:apache-stretch
        environment:
          RELEASE_BRANCH: release/7.6.x-dev

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_DATABASE: testing
          MYSQL_USER: testing
          MYSQL_PASSWORD: testing

    steps:
      - checkout
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      # Run a step to setup an environment variable.
      - run:
          name: Setup Environment Variables
          command: |
            if git ls-remote --heads git@bitbucket.org:org:publicplan/degov_devel_git_lfs.git "$CIRCLE_BRANCH" |grep -q "$CIRCLE_BRANCH";
            then
              echo 'export LFS_BRANCH="$CIRCLE_BRANCH"' >> $BASH_ENV \
            else
              echo 'export LFS_BRANCH="$RELEASE_BRANCH"' >> $BASH_ENV \
            fi

      - run:
          name: Test  Environment Variables
          command: |
            echo "LFS BRANCH: $LFS_BRANCH"

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer create-project --no-progress "degov/degov-project:dev-release/7.6.x-dev" --no-install

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
#      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
#      - run: touch storage/testing.sqlite
#      - run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run
